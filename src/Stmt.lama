-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[stt, wrld], stmt) {
    case stmt of
      Assn (s, e) -> [stt <- [s, evalExpr(stt, e)], wrld]
    | Seq (s1, s2) -> eval(eval(c, s1), s2)
    | Skip -> c
    | Read (s) -> case readWorld (wrld) of [n, nextWrld] -> [stt <- [s, n], nextWrld] esac
    | Write (e) -> [stt, evalExpr (stt, e) . writeWorld (wrld) ]
    | If (cnd, thn, els) -> if evalExpr (stt, cnd) then eval (c, thn) else eval (c, els) fi
    | While (cnd, s) -> if evalExpr (stt, cnd) then eval (eval (c, s), stmt) else c fi
    | DoWhile (s, cnd) -> case eval (c, s) of c@[stt, wrld] ->
            if evalExpr (stt, cnd) then eval (c, stmt) else c fi
        esac
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
