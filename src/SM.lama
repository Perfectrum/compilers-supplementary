-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", string(c), l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

fun evalInsn(c@[s, cs, st, w], i, is){
    case i of
        BINOP (op) -> case s of y:x:s -> [evalOp(op, x, y) : s, cs, st, w] esac
      | LD (x) -> [lookup(st, x) : s, cs, st, w]
      | LDA (x) -> [Ref(x): s, cs, st, w]
      | ST (l) ->
          case s of x:_ -> 
            assign (st, l, x); 
            c  
          esac 
      | STI ->
          case s of
            v:Ref(x):s -> 
              assign(st, x, v);
              [x:s, cs, st, w] 
          esac
      | SEXP (_, nVals) -> evalInsn (c, ARRAY (nVals), is)
      | CONST (n) -> [ n:s, cs, st, w ]
      | LABEL (_) -> c
      | JMP (lab) -> [ c, fromLabel (env, lab) ]
      | CJMP (cnd, l) -> 
          case s of x : s ->
            case cnd of
               Z -> if (x == 0) then [ [s, cs, st, w], fromLabel (env, l) ] else [s, cs, st, w] fi
            | NZ -> if (x == 0) then [s, cs, st, w] else [ [s, cs, st, w], fromLabel (env, l) ] fi
            esac
          esac
      | CALL (fLabel, nArgs) -> [ [s, [st, is]: cs, st, w], fromLabel (env, fLabel) ]
      | BEGIN (_, nArgs, nLocals) ->
          st := makeState (nArgs, nLocals);
          case take (s, nArgs) of [s, args] ->
            foldl (fun (i, arg) {assign (st, Arg (i), arg); i + 1}, 0, args);
            [s, cs, st, w]
          esac
      | GLOBAL (x) -> assign (st, Glb(x), 0); c
      | END ->
          case cs of
              {} -> [c, {}] 
            | [ st, p] : cs -> [ [s, cs, st, w], p ]
          esac
      | DROP -> case s of {} -> c | _:s -> [s, cs, st, w] esac
      | STRING (ss) -> [ss : s, cs, st, w]
      | ARRAY (n) ->
          case take (s, n) of [_:s, elems] ->
            [listArray (elems) : s, cs, st, w]
          esac
      | STA ->
          case s of
            v : Ref (_) : Ref (x) : s -> 
                assign (st, x, v); 
                [v : s, cs, st, w]
            | v : idx : arr : s -> 
                arr [idx] := v;
                [v : s, cs, st, w]
          esac
      | ELEM ->
          case s of id : arr : s ->
            [arr [id] : s, cs, st, w]
          esac      
      | BUILTIN (funName, nArgs) ->
          case take (s, nArgs) of [s, args] ->
            case evalBuiltin (funName, args, w) of [res, w] ->
              [res : s, cs, st, w]
            esac
          esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[s, cs, state, world], is) {
    case is of 
        {} -> c
      | i : is -> 
        case evalInsn (c, i, is) of 
             [c@[s, cs, [_, _], w], i] -> eval (c, i)
            | c@[s, cs, [_, _], w] -> eval (c, is)
        esac 
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileWithLabel (env, expr) {
    case env.genLabel of
      [lab, env] ->
        case compile (lab, env, expr) of
          [labUsed, env, code] ->
            [env, code <+> label (lab, labUsed)]
        esac
    esac
  }

  fun compileMany(lab, env, insns){
    case insns of 
      head:tail -> 
        case genLabel(env) of [s2Lab, env] ->
          case compile (s2Lab, env, head) of [s2LabUsed, env, headCode] ->
            case compileMany (lab, env, tail) of [labUsed, env, tailCode] -> 
              [labUsed, env, 
              headCode 
              <+> label (s2Lab, s2LabUsed) 
              <+> tailCode]
            esac
          esac
        esac
    
      | {} -> [false, env, emptyBuffer()]
      esac
  }

  fun compile (lab, env, stmt) {
    var byteCode = case stmt of
      Skip -> [false, env, emptyBuffer ()]
    | Var (x) -> [false, env, singletonBuffer (LD ( env.lookupVal (x)) )]
    | Ref (x) -> [false, env, singletonBuffer (LDA (lookupVal (env, x)))  <+ LDA (lookupVal (env, x))]
    | Const (n) -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) ->
        case compileWithLabel (env, e) of
          [env, code] -> [false, env, code <+ DROP]
        esac
    | Assn (x, e) ->
      case x of
        Ref (x) ->
          case compileWithLabel (env, e) of
            [env, code] -> [ false, env, code <+ ST ( lookupVar (env, x)) ]
          esac 
        | x ->
          case compileWithLabel (env, e) of [env, code1] ->
            case compileWithLabel (env, x) of [env, code2] ->
              [false, env, code2 <+> code1 <+ STA]
            esac              
          esac
        esac
    | Set (name, e) -> compile (lab, env, Assn (Ref (name), e))
    | Binop (op, l, r) ->
        case compileWithLabel (env, l) of
          [env, code1] ->
            case compileWithLabel (env, r) of
              [env, code2] ->
                [false, env, code1 <+> code2 <+ BINOP (op)]
            esac
        esac
    | Seq (s1, s2)   ->
        case compileWithLabel (env, s1) of [env, code1] ->
          case compile (lab, env, s2) of [used, env, code2] ->
            [used, env, code1 <+> code2]
          esac
        esac
    | If (c, t, e)  ->
        case compileWithLabel (env, c) of
          [env, codeC] ->
            case env.genLabel of
              [elseLabel, env] ->
                case compile (lab, env, t) of
                  [_, env, codeT] ->
                    case compile (lab, env, e) of
                      [_, env, codeE] ->
                        [ true, env,
                          codeC
                            <+ CJMP (Z, elseLabel)
                            <+> codeT
                            <+ JMP (lab)
                            <+ LABEL (elseLabel)
                            <+> codeE ]
              esac
            esac
          esac
        esac
    | While (c, b)    ->
        case env.genLabels (3) of [condLabel, jmpLabel, bodyLabel, env] ->
          case compile (jmpLabel, env, c) of [jmpLabelUsed, env, codeC] ->
            case compile (condLabel, env, b) of [condLabelUsed, env, codeB] ->
              [false, env, emptyBuffer()
                  <+ JMP (condLabel)
                  <+ LABEL (bodyLabel)
                  <+> codeB
                  <+ LABEL (condLabel)
                  <+> codeC
                  <+> label (jmpLabel, jmpLabelUsed)
                  <+ CJMP (NZ, bodyLabel)]
            esac
          esac
        esac
    | DoWhile (s, c)     -> compile (lab, env, Seq (s, While (c, s)))
    | Scope (defs, expr) ->
        var globalsCode;
        env := env.beginScope;
        env := foldl (fun (env, def) {
          case def of
            Var (names) -> env.addVars (names)
          | Fun (name, argNames, body) ->
              case env.genFunLabel (name) of [label, env] ->
                env.addFun (name, label, argNames.size)
              esac
          esac
        }, env, defs);
        globalsCode := foldl (fun (code, def) {
          case def of
            Var (names) ->
              if env.isGlobal == 0 then code else
                foldl (fun (code, name) {code <+ GLOBAL (name)}, code, names)
              fi
          | _ -> code
          esac
        }, emptyBuffer (), defs);
        env := foldl(fun (env, def) {
          case def of
            Fun (name, argNames, body) ->
              case env.lookupFun (name) of Fun (label, _) ->
                env.rememberFun (label, argNames, body)
              esac
          | _ -> env
          esac
        }, env, defs);
        case compile (lab, env, expr) of [used, env, code] ->
          [used, env.endScope, globalsCode <+> code]
        esac 
    | Elem (arrExpr, indexExpr) ->
        case compileMany (lab, env, {arrExpr, indexExpr}) of
          [_, env, code] -> [false, env, code <+ ELEM]
        esac
    | ElemRef (arrExpr, indexExpr) -> compileMany (lab, env, {arrExpr, indexExpr})
    | Call (name, params) -> 
        case lookupFun(env, name) of Fun(fLabel, nArgs) ->
          if fLabel [0] == '$'
            then compile (lab, env, Builtin (name, params))
            else case compileMany(lab, env, params) of [_, env, paramsCode] ->
              [false, env, paramsCode <+ CALL (fLabel, nArgs)] 
            esac
          fi
        esac
    | String (s) -> [false, env, singletonBuffer (STRING (s))]
    | Array (es) ->
        case compileMany (lab, env, es) of [_, env, elemsCode] ->
          [ false, env, emptyBuffer() <+  CONST (size (es)) <+> elemsCode <+ ARRAY (size (es)) ]
        esac
    | Sexp (tag, xs) -> compile (lab, env, Array (xs))
    | Builtin (n, args) -> 
        case compileMany(lab, env, args) of [_, env, argsCode] ->
            [false, env, argsCode <+ BUILTIN(n, size (args))]
        esac
    esac;


    case byteCode of 
        [flag, env, code] -> byteCode
        | _ -> failure("compile return wrong type")
    esac
  }
  
  fun compileList(lab, env, insns){
    case insns of 
      head:tail -> 
        case genLabel(env) of [s2Lab, env] ->
        case compile (s2Lab, env, head) of [s2LabUsed, env, headCode] ->
        case compileList (lab, env, tail) of [labUsed, env, tailCode] -> 
          [labUsed, env, 
          headCode 
          <+> label (s2Lab, s2LabUsed) 
          <+> tailCode]
        esac
        esac
        esac
    
      | {} -> [false, env, emptyBuffer()]
      esac
  }
  fun getGlobalsCode(defs){
      fun genGlobal(code, def){
        case def of 
          Var(namesList) -> 
            foldl(fun(code, varName) {code <+ GLOBAL(varName)}, code, namesList)
          | _ -> code
        esac 
      }

      foldl(genGlobal, emptyBuffer(), defs)
  }
  fun addBindings(env, defs){
    fun addDef(env, def){
      case def of 
        Var(namesList) -> addVars(env, namesList)
        | Fun (name, params, body) -> 
            case genLabel(env) of [fLabel, env] -> 
               addFun(env, name, fLabel, size(params)) 
            esac
      esac 
    }

    foldl(addDef, env, defs)
  }

  fun rememberAll(env, defs){
    fun addDef(env, def){
      case def of 
        Var(namesList) -> env
        | Fun (name, params, body) -> 
            case lookupFun(env, name) of Fun(fLabel, nArgs) ->
              rememberFun(env, fLabel, params, body)
            esac
      esac 
    }

    foldl(addDef, env, defs)
  }

  fun compileFun(env, Fun (fLabel, args, code, state)) {
    env := beginFun(env, state); 
    case genLabel(env) of
      [lab, env] ->
        env := addArgs (env, args);
        case compile (lab, env, code) of
          [labUsed, env, code] ->
            case compileFuns (env) of [_, envTail] ->
              [ emptyBuffer()
                <+ LABEL (fLabel)
                <+ BEGIN ( fLabel, size (args), getLocals (env) )
                <+> code
                <+> label (lab, labUsed)
                <+ END, envTail ]
            esac 
        esac 
    esac
  }

  fun compileFuns(env) {
    case getFuns (env) of [inFuns, env] ->
      foldl(
        fun ([code, env], f) { case compileFun (env, f) of [inCode, env] -> [code <+> inCode, env] esac },
        [ emptyBuffer(), env ],
        inFuns)
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          case compileFuns (env) of
            [fCode, _] ->
              getBuffer $ singletonBuffer (LABEL ("main"))
                <+ BEGIN("main", 0, getLocals (env))
                <+> code <+> label (endLab, endLabUsed) 
                <+ END
                <+> fCode
          esac
      esac
  esac
}
