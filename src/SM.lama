-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stck, stt, wrld], insns) {
  case insns of 
  {} -> c
  | i: is ->
    case i of
        READ -> case readWorld (wrld) of [n, newWrld] -> eval (env, [n:stck, stt, newWrld], is) esac
      | WRITE  -> case stck of (s:ss) -> eval (env, [ss, stt, writeWorld(s, wrld)], is) esac
      | BINOP (op) -> case stck of (s:f:ss) -> eval (env, [evalOp (op, f, s) : ss, stt, wrld], is) esac
      | LD    (x) -> eval (env, [stt (x) : stck, stt, wrld], is)
      | ST    (x) -> case stck of (s:ss) -> eval (env, [ss, stt <- [x, s], wrld], is) esac
      | CONST (n) -> eval (env, [n : stck, stt, wrld], is)
      | JMP (lab) -> eval (env, c, env.fromLabel (lab))
      | CJMP (cnd, lab) -> 
        case stck of (r:rs) ->
          case cnd of
               Z -> if r == 0 then eval (env, [rs, stt, wrld], env.fromLabel (lab)) else eval (env, [rs, stt, wrld], is) fi
            | NZ -> if r == 0 then eval (env, [rs, stt, wrld], is) else eval (env, [rs, stt, wrld], env.fromLabel (lab)) fi
          esac
        esac
      | LABEL (_) -> eval (env, c, is)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
      Var(varName) -> singletonBuffer ( LD (varName) )
    | Const(x) -> singletonBuffer ( CONST (x) )
    | Binop (op, le, re) -> compileExpr (le) <+> compileExpr (re) <+ BINOP (op)
  esac
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab --- a label th go to after the statement is executed
  --    env  --- compilation environment  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cnd, thn, els) ->
        case env.genLabel of
            [elsLab, env] ->
                case compile (lab, env, thn) of
                    [_, env, thnCode] ->
                        case compile (lab, env, els) of
                            [_, env, elsCode] ->
                                [true, env, compileExpr (cnd) <+ CJMP (Z, elsLab)
                                            <+> thnCode <+ JMP (lab)
                                            <+ LABEL (elsLab) <+> elsCode
                                ]
                        esac
                esac
        esac
    | While (cnd, s) ->
         case env.genLabel of
            [sLab, env] ->
                case env.genLabel of
                    [cndLab, env] ->
                         case compile (cndLab, env, s) of
                            [_, env, sCode] ->
                                [false, env, singletonBuffer (JMP (cndLab)) <+ LABEL (sLab) <+> sCode
                                                <+ LABEL (cndLab) <+> compileExpr (cnd) <+ CJMP (NZ, sLab)
                            ]
                        esac
                esac
        esac
    | DoWhile (s, cnd) ->
        case env.genLabel of
            [sLab, env] ->
                case env.genLabel of
                    [cndLab, env] ->
                        case compile (cndLab, env, s) of
                            [cndLab2, env, sCode] ->
                                [false, env, singletonBuffer (LABEL (sLab)) <+> sCode
                                                <+> label (cndLab, cndLab2) <+> compileExpr (cnd)
                                                <+ CJMP (NZ, sLab)                                ]
                        esac
                esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }
  


  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
