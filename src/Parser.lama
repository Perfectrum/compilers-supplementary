-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
    -- decimal constant
      loc=pos x=decimal {
        fun (a) {
            assertValue (a, Const (stringInt (x)), loc)
        }}

    -- identifier
    | x=lident { fun (a) {
                            case a of
                                  Ref  -> Ref (x)
                                | Void -> Ignore (Var (x))
                                | _    -> Var (x)
                            esac
                        }}
    | inbr [ s ("("), exp, s (")") ]
    | loc=pos kSkip { fun (a) { assertVoid (a, Skip, loc) } }
    | loc=pos kRead s["("] n=lident s[")"] { fun (a) { assertVoid (a, Read (n), loc) } }
    | loc=pos kWrite s["("] x=exp s[")"] { fun (a) { assertVoid (a, Write (x (Val)), loc) } }
    | loc=pos kWhile cnd=exp kDo wrk=exp kOd { fun (a) { assertVoid (a, While (cnd (Val), wrk (Void)), loc) } }
    | loc=pos kDo wrk=exp kWhile cnd=exp kOd { fun (a) { assertVoid (a, DoWhile (wrk (Void), cnd (Val)), loc) } }
    | loc=pos kFor init=exp s[","] cnd=exp s[","] inc=exp kDo wrk=exp kOd {
        fun (a) {
            assertVoid (a,
                Seq (
                    init (Void), While (
                        cnd (Val),
                        Seq (
                            wrk (Void),
                            inc (Void)
                        )
                    )
                ),
                loc
            )
        } }
    | loc=pos kIf cnd=exp kThen thn=exp kFi { fun (a) { If (cnd (Val), thn (a), Skip) } }
    | loc=pos kIf cnd=exp kThen thn=exp els=ifTail kFi { fun (a) { If (cnd (Val), thn (a), els (a)) } }
    ),
    ifTail = memo $ eta syntax (
           kElif cnd=exp kThen thn=exp els=ifTail {
              fun (a) {
                  If ( cnd (Val), thn (a), els (a) )
              }
          }
          | kElse thn=exp { thn }
    ),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
