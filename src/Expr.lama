-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
    case expr of
      Assn (n, x) ->
        case evalList (c, {n, x}) of
            [ [s, w], {n, x} ] -> [ [s <- [n, x], w], x ]
        esac
    | Seq (l, r) ->
        case evalList (c, {l, r}) of
            [c, {_, x}] -> [c, x]
        esac
    | Skip -> [c, Z]
    | Read (n) ->
        case readWorld (w) of
            [x, w] -> [ [s <- [n, x], w], Z ]
        esac
    | Write (e) ->
        case eval (c, e) of
            [c, x] -> [ [s, writeWorld (x, w)], Z ]
        esac
    | If (cnd, t, f) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (c, t) else eval (c, f) fi
        esac
    | While (cnd, b) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (eval (c, b) [0], expr) else [c, Z] fi
        esac
    | DoWhile (b, cnd) ->
        case eval (eval (c, b) [0], cnd) of
            [c, cnd] -> if cnd then eval (c, expr) else [c, Z] fi
        esac
    | Var (n) -> [c, s (n)]
    | Ref (r) -> [c, r]
    | Const (x) -> [c, x]
    | Binop (op, le, re) -> 
        case evalList (c, {le, re}) of
            [c, {le, re}] -> [c, evalOp (op, le, re)]
        esac
    | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Z] esac
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
