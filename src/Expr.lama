-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
    case expr of
    -- ASSN
    Assn (x, e) ->
      case evalList (c, {x, e}) of
        [[st, w], {Ref (x), n}] -> [[st <- [x, n], w], n]
      esac
    | Seq (l, r) ->
        case evalList (c, {l, r}) of
            [c, {_, x}] -> [c, x]
        esac
    | Skip -> [c, Z]
    | Read (n) ->
        case eval (c, n) of
          [c, Ref (n)] ->
            case readWorld (w) of
              [x, w] -> [[s <- [n, x], w], Bot]
            esac
        esac
    | Write (e) ->
        case eval (c, e) of
            [[s, w], x] -> [ [s, writeWorld (x, w)], Z ]
        esac
    | If (cnd, t, f) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (c, t) else eval (c, f) fi
        esac
    | While (cnd, b) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (eval (c, b) [0], expr) else [c, Z] fi
        esac
    | DoWhile (b, cnd) ->
        case eval (eval (c, b) [0], cnd) of
            [c, cnd] -> if cnd then eval (c, expr) else [c, Z] fi
        esac
    | Var (n) -> [c, s . lookup (n)]
    | Ref (n) -> [c, Ref (n) ]
    | Const (x) -> [c, x]
    | Binop (op, le, re) -> 
        case evalList (c, {le, re}) of
            [c, {le, re}] -> [c, evalOp (op, le, re)]
        esac
    | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Z] esac
    | Scope (ds, expr) ->
      case eval (
        [ foldl (
          fun (s, d) {
            case d of
              Var (names) -> s.addNames (names)
            | Fun (name, args, body) -> s.addFunction (name, args, body)
            esac
          }, s.enterScope, ds
        ),
        w ], expr) of
          [[s, w], n] ->
            [[s.leaveScope, w], n]
      esac
    | Call (funName, argExprs) ->
      case s.lookup (funName) of
        Fun (argNames, bodyExpr) ->
          case evalList (c, argExprs)
            of [[sNew, w], argVals] ->
              case eval (
                [ foldl (
                    fun (s, [name, v]) { s.addName (name, v) },
                    sNew.enterFunction,
                    zip (argNames, argVals)
                  ),
                  w ], bodyExpr) of  
                    [ [sNew, w], res ] ->
                      [ [s.leaveFunction (sNew.getGlobal), w ], res]
              esac
        esac
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}