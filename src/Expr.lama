-- Expression evaluator

import List;
import State;


public fun evalOp (op, l, r) {
    case op of
      "+" -> l + r
    | "-" -> l - r
    | "*" -> l * r
    | "/" -> l / r
    | "%" -> l % r
    | "<" -> l < r
    | ">" -> l > r
    | "<=" -> l <= r
    | ">=" -> l >= r
    | "==" -> l == r
    | "!=" -> l != r
    | "&&" -> l && r
    | "!!" -> l !! r
  esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
    case expr of
      Var (s) -> st (s)
    | Const (x) -> x
    | Binop (op, le, re) -> evalOp(op, evalExpr (st, le), evalExpr (st, re))
    esac
}
