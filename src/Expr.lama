-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn (x, e) ->
        case evalList (c, {x, e}) of
            [[st, w], {Ref (x), n}] -> [[st <- [x, n], w], n]
          | [c, {ElemRef (xs, i), n}] -> [c, xs[i] := n]
        esac
    | Set (n, e) -> eval (c, Assn (Ref (n), e))
    | Seq (l, r) ->
        case evalList (c, {l, r}) of
            [c, {_, x}] -> [c, x]
        esac
    | Skip -> [c, Z]
    | If (cnd, t, f) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (c, t) else eval (c, f) fi
        esac
    | While (cnd, b) ->
        case eval (c, cnd) of
            [c, cnd] -> if cnd then eval (eval (c, b) [0], expr) else [c, Z] fi
        esac
    
    | DoWhile (b, cnd) ->
        case eval (eval (c, b) [0], cnd) of
            [c, cnd] -> if cnd then eval (c, expr) else [c, Z] fi
        esac

    | Var (n) -> [c, lookup (s, n)]
    | Ref (n) -> [c, Ref (n)]
    | Const (x) -> [c, x]
    | Binop (op, le, re) -> 
        case evalList (c, {le, re}) of
            [c, {le, re}] -> [c, evalOp (op, le, re)]
        esac
    | Ignore (e) -> case eval (c, e) of [c, _] -> [c, Z] esac
    | Scope (ds, expr) ->
        case eval (
          [ foldl (
            fun (s, d) {
              case d of
                Var (names) -> addNames (s, names)
              | Fun (name, args, body) -> addFunction (s, name, args, body)
              esac
            }, s.enterScope, ds
          ),
          w ], expr) of
            [ [s, w], n] ->
              [ [leaveScope (s), w], n]
        esac
    | Call (funName, argExprs) ->
        case lookup (s, funName) of
          Fun (argNames, bodyExpr) ->
            case evalList (c, argExprs)
              of [[sNew, w], argVals] ->
                case bodyExpr of
                  External -> 
                    case evalBuiltin (funName, argVals, w) of
                      [res, w] -> [[s, w], res]
                    esac
                | _ ->
                  case eval (
                    [ foldl (
                        fun (s, [name, v]) { addName (s, name, v) },
                        enterFunction (sNew),
                        zip (argNames, argVals)
                      ),
                      w ], bodyExpr) of  
                        [ [sNew, w], res ] ->
                          [ [leaveFunction (s, getGlobal (sNew)), w ], res]
                  esac
                esac
            esac
        esac
  | String (s) -> [c, s]
  | Array (es) ->
      case evalList (c, es) of
        [c, vals] ->
          [c, listArray (vals)]
      esac
  | Sexp (s, es) ->
      case evalList (c, es) of
        [c, vals] ->
          [c, Sexp (s, listArray (vals))]
      esac
  | Elem (e, ie) ->
      case evalList (c, {e, ie}) of
        [ c, {xs, i} ] ->
          case xs of
              Sexp (_, xs) -> [ c, xs [i] ]
            | _ -> [ c, xs [i] ]
          esac
      esac
  | ElemRef (e, ie) ->
      case evalList (c, {e, ie}) of
        [c, {xs, i}] ->
          [ c, ElemRef (xs, i) ]
      esac
  
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
